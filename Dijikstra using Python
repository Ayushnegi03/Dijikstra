#Dijikstra Algorithem
class Graph():  
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                      for row in range(vertices)]
 
    def PrintSolution(self, distance):
        print("Vertex \t Distance from Source")
        for node in range(self.V):
            print(node, "\t\t", distance[node])
    def MinDistance(self, distance, sptSet):
        min = 1e7
        for v in range(self.V):
            if distance[v] < min and sptSet[v] == False:
                min = distance[v]
                min_index = v
        return min_index
    def dijkstra(self, src):
        distance = [1e7] * self.V
        distance[src] = 0
        sptSet = [False] * self.V
        for cout in range(self.V):
            u = self.MinDistance(distance, sptSet)
            sptSet[u] = True
            for v in range(self.V):
                if (self.graph[u][v] > 0 and
                   sptSet[v] == False and
                   distance[v] > distance[u] + self.graph[u][v]):
                    distance[v] = distance[u] + self.graph[u][v]
        self.PrintSolution(distance)
g = Graph(9)
g.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0],
           [4, 0, 8, 0, 0, 0, 0, 11, 0],
           [0, 8, 0, 7, 0, 4, 0, 0, 2],
           [0, 0, 7, 0, 9, 14, 0, 0, 0],
           [0, 0, 0, 9, 0, 10, 0, 0, 0],
           [0, 0, 4, 14, 10, 0, 2, 0, 0],
           [0, 0, 0, 0, 0, 2, 0, 1, 6],
           [8, 11, 0, 0, 0, 0, 1, 0, 7],
           [0, 0, 2, 0, 0, 0, 6, 7, 0]
           ]
g.dijkstra(0)
#Output-
#Vertex   Distance from Source
#0                0
#1                4
#2                12
#3                19
#4                21
#5                11
#6                9
#7                8
#8                14
